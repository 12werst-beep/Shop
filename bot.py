import os
import asyncio
import logging
from aiohttp import web
import httpx
from bs4 import BeautifulSoup

# --- –ò–ú–ü–û–†–¢–´ AIOMGRAM 3.X ---
from aiogram.filters import Command
from aiogram import F
from aiogram.types import Update, Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.client.bot import Bot, DefaultBotProperties
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Dispatcher
import aiosqlite

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
RENDER_SERVICE_URL = os.getenv("RENDER_SERVICE_URL")  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://shop-rm9r.onrender.com
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{RENDER_SERVICE_URL}{WEBHOOK_PATH}"

POLL_INTERVAL_SECONDS = 900  # 15 –º–∏–Ω—É—Ç
RATE_LIMIT_MS = 400

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    session=AiohttpSession(),
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# --- FSM ---
class SearchStates(StatesGroup):
    waiting_for_link = State()
    waiting_for_threshold = State()

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
DB_FILE = "alerts.db"

async def init_db():
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS alerts(
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                link TEXT,
                shop TEXT,
                product TEXT,
                price REAL,
                threshold REAL
            )
        """)
        await db.commit()

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "<b>–ü—Ä–∏–≤–µ—Ç!</b>\n–Ø –º–æ–≥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ü–µ–Ω–∞–º–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã –≤ <i>–ú–∞–≥–Ω–∏—Ç–µ</i>.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/search - –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
        "/alerts - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ"
    )

@dp.message(Command("search"))
async def cmd_search(message: Message, state: FSMContext):
    await message.answer(
        "üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –≤ <b>–ú–∞–≥–Ω–∏—Ç–µ</b>:\n"
        "–ü—Ä–∏–º–µ—Ä: <code>https://magnit.ru/promo-product/2158136-ikra-lososevaia-zernistaia-90-g?shopCode=743774</code>"
    )
    await state.set_state(SearchStates.waiting_for_link)

@dp.message(SearchStates.waiting_for_link)
async def process_link(message: Message, state: FSMContext):
    link = message.text.strip()
    if "magnit.ru" not in link:
        await message.answer("‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å —Å–∞–π—Ç–∞ magnit.ru. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(link=link)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(SearchStates.waiting_for_threshold)

@dp.message(SearchStates.waiting_for_threshold)
async def process_threshold(message: Message, state: FSMContext):
    data = await state.get_data()
    link = data["link"]
    try:
        threshold = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>250</b> –∏–ª–∏ <b>250.99</b>")
        return

    # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä
    product, price, shop = await parse_product(link)
    if product is None:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(
            "INSERT INTO alerts(user_id, link, shop, product, price, threshold) VALUES (?, ?, ?, ?, ?, ?)",
            (message.from_user.id, link, shop, product, price, threshold)
        )
        await db.commit()

    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ:\n<b>{product}</b>\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price} ‚ÇΩ\n–ü–æ—Ä–æ–≥: {threshold} ‚ÇΩ")
    await state.clear()

# --- –ü–∞—Ä—Å–∏–Ω–≥ –ú–∞–≥–Ω–∏—Ç–∞ ---
async def parse_product(url):
    try:
        await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏

        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
            "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
            "Accept-Encoding": "gzip, deflate, br",
            "Connection": "keep-alive",
            "Upgrade-Insecure-Requests": "1",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "none",
            "Sec-Fetch-User": "?1",
            "Cache-Control": "max-age=0",
        }

        async with httpx.AsyncClient(timeout=15, headers=headers) as client:
            r = await client.get(url)
            if r.status_code != 200:
                logger.error(f"HTTP {r.status_code} –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}")
                return None, None, None

            html = r.text
            soup = BeautifulSoup(html, "html.parser")

            # --- –ú–∞–≥–Ω–∏—Ç: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ —Ç–∏–ø–∞ URL ---
            if "magnit.ru" in url:
                shop = "–ú–∞–≥–Ω–∏—Ç"

                # üü¢ –ü–†–û–ú–û-–¢–û–í–ê–† (–Ω–∞–ø—Ä–∏–º–µ—Ä: /promo-product/...)
                prod_tag = soup.select_one("span[data-test-id='v-product-details-offer-name']")
                price_tag = soup.select_one("span[data-v-67b88f3b]")

                # üîµ –û–ë–´–ß–ù–´–ô –¢–û–í–ê–† (–Ω–∞–ø—Ä–∏–º–µ—Ä: /product/...)
                if not prod_tag or not price_tag:
                    prod_tag = soup.select_one("h1.product-title")
                    price_tag = soup.select_one("span.price-value")

                product = prod_tag.text.strip() if prod_tag else None
                price_text = price_tag.text.strip() if price_tag else ""

                # –ß–∏—Å—Ç–∏–º —Ü–µ–Ω—É: —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, ‚ÇΩ, –∑–∞–ø—è—Ç—ã–µ
                price_cleaned = price_text.replace("‚ÄØ", "").replace("‚ÇΩ", "").replace(",", ".")
                price = float(price_cleaned) if price_cleaned else None

                if not product or price is None:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ —Ü–µ–Ω—É —Å {url}. –ü—Ä–æ–¥—É–∫—Ç: {product}, –¶–µ–Ω–∞: {price}")
                    return None, None, None

                return product, price, shop

            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–º–µ–Ω: {url}")
                return None, None, None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {url}: {e}", exc_info=True)
        return None, None, None

            return product, price, "–ú–∞–≥–Ω–∏—Ç"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {url}: {e}", exc_info=True)
        return None, None, None

# --- Inline –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
def generate_alerts_keyboard(alerts):
    buttons = [
        [InlineKeyboardButton(f"{a[3]} ({a[5]} ‚ÇΩ)", callback_data=f"del_{a[0]}")]
        for a in alerts
    ]
    if buttons:
        buttons.append([InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="del_all")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@dp.message(Command("alerts"))
async def show_alerts(message: Message):
    async with aiosqlite.connect(DB_FILE) as db:
        cursor = await db.execute("SELECT * FROM alerts WHERE user_id=?", (message.from_user.id,))
        alerts = await cursor.fetchall()
    if not alerts:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª")
        return
    kb = generate_alerts_keyboard(alerts)
    await message.answer("–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:", reply_markup=kb)

@dp.callback_query(F.data.startswith("del_"))
async def delete_alert_callback(query: CallbackQuery):
    data = query.data
    async with aiosqlite.connect(DB_FILE) as db:
        if data == "del_all":
            await db.execute("DELETE FROM alerts WHERE user_id=?", (query.from_user.id,))
            await db.commit()
            await query.message.edit_text("–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ —É–¥–∞–ª–µ–Ω—ã")
        else:
            alert_id = int(data.split("_")[1])
            await db.execute("DELETE FROM alerts WHERE user_id=? AND id=?", (query.from_user.id, alert_id))
            await db.commit()
            await query.message.edit_text("–ü—Ä–∞–≤–∏–ª–æ —É–¥–∞–ª–µ–Ω–æ")
    await query.answer()

# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ---
async def monitor_alerts():
    while True:
        async with aiosqlite.connect(DB_FILE) as db:
            cursor = await db.execute("SELECT * FROM alerts")
            all_alerts = await cursor.fetchall()
        for a in all_alerts:
            alert_id, user_id, link, shop, product, price, threshold = a
            new_product, new_price, _ = await parse_product(link)
            if new_price is not None and new_price <= threshold:
                try:
                    await bot.send_message(
                        user_id,
                        f"üî• –¶–µ–Ω–∞ —É–ø–∞–ª–∞ –¥–æ {new_price} ‚ÇΩ!\n"
                        f"üõçÔ∏è {product}\n"
                        f"üîó {link}"
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
        await asyncio.sleep(POLL_INTERVAL_SECONDS)

# --- Webhook –¥–ª—è Render (aiogram 3.x) ---
async def handle_webhook(request: web.Request):
    data = await request.json()
    update = Update.model_validate(data, context={"bot": bot})
    await dp.feed_update(bot, update)
    return web.Response()

async def main():
    await init_db()
    asyncio.create_task(monitor_alerts())

    # üî¥ –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –í–ï–ë–•–£–ö!
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle_webhook)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 10000)))
    await site.start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render!")
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())

