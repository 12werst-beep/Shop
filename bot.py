import os
import re
import asyncio
import logging
from datetime import datetime

import aiosqlite
import httpx
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Update
from aiohttp import web

# ---------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# ---------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ----------
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
RENDER_SERVICE_URL = os.getenv("RENDER_SERVICE_URL", "https://shop-rm9r.onrender.com")  # ‚ùå –£–ë–†–ê–õ –ü–†–û–ë–ï–õ–´!
POLL_INTERVAL_SECONDS = int(os.getenv("POLL_INTERVAL_SECONDS", 900))
RATE_LIMIT_MS = int(os.getenv("RATE_LIMIT_MS", 400))
DB_PATH = "data/alerts.db"  # üìÅ –ü–∞–ø–∫–∞ –¥–ª—è SQLite ‚Äî —Å–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{RENDER_SERVICE_URL}{WEBHOOK_PATH}"

# üî¥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ ‚Äî –±–µ–∑ –Ω–µ–≥–æ –±–æ—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
if not BOT_TOKEN:
    logger.critical("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    raise SystemExit(1)

# ---------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ----------
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# ---------- FSM ----------
class SearchStates(StatesGroup):
    waiting_for_link = State()
    waiting_for_threshold = State()

# ---------- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ----------
async def init_db():
    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)  # üìÅ –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É data/
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS alerts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                link TEXT NOT NULL,
                shop TEXT,
                product TEXT,
                price REAL,
                threshold REAL
            )
            """
        )
        await db.commit()

async def add_alert(user_id, link, shop, product, price, threshold):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO alerts (user_id, link, shop, product, price, threshold) VALUES (?, ?, ?, ?, ?, ?)",
            (user_id, link, shop, product, price, threshold),
        )
        await db.commit()

async def get_alerts(user_id):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT id, link, shop, product, price, threshold FROM alerts WHERE user_id = ?", (user_id,)) as cur:
            return await cur.fetchall()

async def delete_alert(user_id, alert_id):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM alerts WHERE user_id = ? AND id = ?", (user_id, alert_id))
        await db.commit()

async def get_all_alerts():
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT id, user_id, link, shop, product, price, threshold FROM alerts") as cur:
            return await cur.fetchall()

# ---------- –ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–æ–≤ ----------
async def fetch_price_and_product(url: str):
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0 Safari/537.36"
    }
    try:
        async with httpx.AsyncClient(timeout=15.0, headers=headers) as client:
            resp = await client.get(url)
            if resp.status_code == 404:
                return None, None, None
            html = resp.text

            # –ú–∞–≥–Ω–∏—Ç
            if "magnit.ru" in url:
                shop = "–ú–∞–≥–Ω–∏—Ç"
                product_match = re.search(r'product-details-offer__title.*?>(.*?)</span>', html)
                price_match = re.search(r'(\d+[.,]?\d*)\s*‚ÇΩ', html)
            # –õ–µ–Ω—Ç–∞
            elif "lenta.com" in url:
                shop = "–õ–µ–Ω—Ç–∞"
                product_match = re.search(r'product.*?>(.*?)</span>', html)
                price_match = re.search(r'(\d+[.,]?\d*)\s*‚ÇΩ', html)
            # –ü—è—Ç–µ—Ä–æ—á–∫–∞
            elif "5ka.ru" in url:
                shop = "–ü—è—Ç–µ—Ä–æ—á–∫–∞"
                product_match = re.search(r'<h1.*?>(.*?)</h1>', html)
                price_match = re.search(r'content="(\d+[.,]?\d*)"', html)
            # –ë—Ä–∏—Å—Ç–æ–ª—å
            elif "bristol.ru" in url:
                shop = "–ë—Ä–∏—Å—Ç–æ–ª—å"
                product_match = re.search(r'<h1.*?>(.*?)</h1>', html)
                price_match = re.search(r'(\d+[.,]?\d*)\s*‚ÇΩ', html)
            # –°–ø–∞—Ä
            elif "myspar.ru" in url:
                shop = "–°–ø–∞—Ä"
                product_match = re.search(r'<h1.*?>(.*?)</h1>', html)
                price_match = re.search(r'(\d+[.,]?\d*)', html)
            # Wildberries
            elif "wildberries.ru" in url:
                shop = "Wildberries"
                product_match = re.search(r'productTitle.*?>(.*?)</h1>', html)
                price_match = re.search(r'(\d[\d\s]+)\s*‚ÇΩ', html)
            else:
                return None, None, None

            product = product_match.group(1).strip() if product_match else None
            price_str = price_match.group(1).replace(" ", "").replace(",", ".") if price_match else None
            price = float(price_str) if price_str else None
            return shop, product, price
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {url}: {e}")
        return None, None, None

# ---------- –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä ----------
async def monitor_alerts():
    while True:
        start_time = asyncio.get_event_loop().time()
        alerts = await get_all_alerts()

        for alert in alerts:
            try:
                alert_id, user_id, link, shop, product, old_price, threshold = alert
                shop, product, current_price = await fetch_price_and_product(link)
                if not current_price:
                    continue
                if current_price <= threshold:
                    try:
                        await bot.send_message(
                            user_id,
                            f"<b>{shop}</b>\nüî• –¶–µ–Ω–∞ —É–ø–∞–ª–∞ –¥–æ <b>{current_price} ‚ÇΩ</b>!\n"
                            f"üõçÔ∏è {product}\nüîó <a href='{link}'>–°—Å—ã–ª–∫–∞</a>"
                        )
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ª–µ—Ä—Ç–∞ {alert_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

            await asyncio.sleep(RATE_LIMIT_MS / 1000.0)

        elapsed = asyncio.get_event_loop().time() - start_time
        sleep_time = max(0, POLL_INTERVAL_SECONDS - elapsed)
        await asyncio.sleep(sleep_time)

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/search ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "/alerts ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞\n"
    )

@dp.message(Command("search"))
async def cmd_search(message: Message, state: FSMContext):
    await state.set_state(SearchStates.waiting_for_link)
    await message.answer("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:")

@dp.message(SearchStates.waiting_for_link)
async def process_link(message: Message, state: FSMContext):
    link = message.text.strip()
    await state.update_data(link=link)
    await state.set_state(SearchStates.waiting_for_threshold)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (‚ÇΩ):")

@dp.message(SearchStates.waiting_for_threshold)
async def process_threshold(message: Message, state: FSMContext):
    try:
        threshold = float(message.text.strip().replace(",", "."))
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 200")
        return

    data = await state.get_data()
    link = data["link"]
    shop, product, price = await fetch_price_and_product(link)
    if not price:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É.")
        await state.clear()
        return

    await add_alert(message.from_user.id, link, shop, product, price, threshold)
    await message.answer(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ:\n"
        f"<b>{shop}</b> ‚Äî {product}\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price} ‚ÇΩ, —É–≤–µ–¥–æ–º–∏—Ç—å –ø—Ä–∏ ‚â§ {threshold} ‚ÇΩ"
    )
    await state.clear()

@dp.message(Command("alerts"))
async def cmd_alerts(message: Message):
    alerts = await get_alerts(message.from_user.id)
    if not alerts:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª.")
        return

    text = "üìã –í–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞:\n\n"
    kb = []
    for alert in alerts:
        alert_id, link, shop, product, price, threshold = alert
        text += f"#{alert_id} <b>{shop}</b> ‚Äî {product}\n–¢–µ–∫—É—â–∞—è: {price} ‚ÇΩ, –ø–æ—Ä–æ–≥: {threshold} ‚ÇΩ\n\n"
        kb.append([InlineKeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å #{alert_id}", callback_data=f"del:{alert_id}")])

    markup = InlineKeyboardMarkup(inline_keyboard=kb)
    await message.answer(text, reply_markup=markup)

@dp.callback_query(F.data.startswith("del:"))
async def cb_delete_alert(callback: CallbackQuery):
    alert_id = int(callback.data.split(":")[1])
    await delete_alert(callback.from_user.id, alert_id)
    await callback.message.edit_text("‚úÖ –ü—Ä–∞–≤–∏–ª–æ —É–¥–∞–ª–µ–Ω–æ")
    await callback.answer("–£–¥–∞–ª–µ–Ω–æ")

# ---------- Webhook ----------
async def handle_webhook(request: web.Request):
    data = await request.json()
    update = Update.model_validate(data)  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è aiogram 3.6+
    await dp.feed_webhook_update(bot, update)  # ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–µ—Ç–æ–¥
    return web.Response(text="OK")

# ---------- Main ----------
async def main():
    await init_db()
    asyncio.create_task(monitor_alerts())

    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle_webhook)

    async def on_startup(app):
        await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

    async def on_shutdown(app):
        await bot.delete_webhook()
        logger.info("üóëÔ∏è Webhook —É–¥–∞–ª—ë–Ω")

    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.getenv("PORT", 10000))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    logger.info(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port} —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫")

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª ‚Äî —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())
