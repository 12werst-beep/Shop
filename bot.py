import os
import asyncio
import logging
from aiohttp import web
import httpx
from bs4 import BeautifulSoup

from aiogram import F
from aiogram.client.bot import Bot, DefaultBotProperties
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Dispatcher
import aiosqlite

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
RENDER_SERVICE_URL = os.getenv("RENDER_SERVICE_URL")  # https://shop-rm9r.onrender.com   
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{RENDER_SERVICE_URL}{WEBHOOK_PATH}"

POLL_INTERVAL_SECONDS = 900  # 15 –º–∏–Ω
RATE_LIMIT_MS = 400

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    session=AiohttpSession(),
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# --- FSM ---
class SearchStates(StatesGroup):
    waiting_for_link = State()
    waiting_for_threshold = State()

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
DB_FILE = "alerts.db"

async def init_db():
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS alerts(
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                link TEXT,
                shop TEXT,
                product TEXT,
                price REAL,
                threshold REAL
            )
        """)
        await db.commit()

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "<b>–ü—Ä–∏–≤–µ—Ç!</b>\n–Ø –º–æ–≥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ü–µ–Ω–∞–º–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/search - –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
        "/alerts - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ"
    )

@dp.message(Command("search"))
async def cmd_search(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(SearchStates.waiting_for_link)

@dp.message(SearchStates.waiting_for_link)
async def process_link(message: Message, state: FSMContext):
    await state.update_data(link=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:")
    await state.set_state(SearchStates.waiting_for_threshold)

@dp.message(SearchStates.waiting_for_threshold)
async def process_threshold(message: Message, state: FSMContext):
    data = await state.get_data()
    link = data["link"]
    try:
        threshold = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä
    product, price, shop = await parse_product(link)
    if product is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ.")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(
            "INSERT INTO alerts(user_id, link, shop, product, price, threshold) VALUES (?, ?, ?, ?, ?, ?)",
            (message.from_user.id, link, shop, product, price, threshold)
        )
        await db.commit()

    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ:\n<b>{product}</b>\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price} ‚ÇΩ\n–ü–æ—Ä–æ–≥: {threshold} ‚ÇΩ")
    await state.clear()

# --- –ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–æ–≤ ---
async def parse_product(url):
    try:
        async with httpx.AsyncClient(timeout=15) as client:
            r = await client.get(url)
            if r.status_code != 200:
                return None, None, None
            html = r.text
            soup = BeautifulSoup(html, "lxml")

            if "magnit.ru" in url:
                shop = "–ú–∞–≥–Ω–∏—Ç"
                prod_tag = soup.select_one("span[data-test-id='v-product-details-offer-name']")
                price_tag = soup.select_one("span[data-v-67b88f3b]")
                product = prod_tag.text.strip() if prod_tag else None
                price = float(price_tag.text.strip().replace("‚ÄØ", "").replace("‚ÇΩ","").replace(",",".")) if price_tag else None
            elif "lenta.com" in url:
                shop = "–õ–µ–Ω—Ç–∞"
                prod_tag = soup.select_one("span[_ngcontent-ng-c2436889447]")
                price_tag = soup.select_one("span.main-price.__accent")
                product = prod_tag.text.strip() if prod_tag else None
                price = float(price_tag.text.strip().split()[0].replace(",",".")) if price_tag else None
            elif "5ka.ru" in url:
                shop = "–ü—è—Ç–µ—Ä–æ—á–∫–∞"
                prod_tag = soup.select_one("h1[itemprop='name']")
                price_tag = soup.select_one("p[itemprop='price']")
                product = prod_tag.text.strip() if prod_tag else None
                price = float(price_tag.text.strip().replace(",",".")) if price_tag else None
            elif "bristol.ru" in url:
                shop = "–ë—Ä–∏—Å—Ç–æ–ª—å"
                prod_tag = soup.select_one("h1.product-page__title")
                price_tag = soup.select_one("span.product-card__price-tag__price")
                product = prod_tag.text.strip() if prod_tag else None
                price = float(price_tag.text.strip().replace(",",".")) if price_tag else None
            elif "myspar.ru" in url:
                shop = "–°–ø–∞—Ä"
                prod_tag = soup.select_one("h1.catalog-element__title")
                price_tag = soup.select_one("span.js-item-price")
                product = prod_tag.text.strip() if prod_tag else None
                price = float(price_tag.text.strip().replace(",",".")) if price_tag else None
            elif "wildberries.ru" in url:
                shop = "Wildberries"
                prod_tag = soup.select_one("h1.productTitle--J2W7I")
                price_tag = soup.select_one("ins.priceBlockFinalPrice--iToZR")
                product = prod_tag.text.strip() if prod_tag else None
                price = float(price_tag.text.strip().replace("\u00A0","").replace("‚ÇΩ","").replace(",",".")) if price_tag else None
            else:
                return None, None, None
            return product, price, shop
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {url}: {e}")
        return None, None, None

# --- Inline –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
def generate_alerts_keyboard(alerts):
    buttons = [
        [InlineKeyboardButton(f"{a[3]} ({a[5]} ‚ÇΩ)", callback_data=f"del_{a[0]}")]
        for a in alerts
    ]
    if buttons:
        buttons.append([InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="del_all")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@dp.message(Command("alerts"))
async def show_alerts(message: Message):
    async with aiosqlite.connect(DB_FILE) as db:
        cursor = await db.execute("SELECT * FROM alerts WHERE user_id=?", (message.from_user.id,))
        alerts = await cursor.fetchall()
    if not alerts:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª")
        return
    kb = generate_alerts_keyboard(alerts)
    await message.answer("–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:", reply_markup=kb)

@dp.callback_query(F.data.startswith("del_"))
async def delete_alert_callback(query: CallbackQuery):
    data = query.data
    async with aiosqlite.connect(DB_FILE) as db:
        if data == "del_all":
            await db.execute("DELETE FROM alerts WHERE user_id=?", (query.from_user.id,))
            await db.commit()
            await query.message.edit_text("–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ —É–¥–∞–ª–µ–Ω—ã")
        else:
            alert_id = int(data.split("_")[1])
            await db.execute("DELETE FROM alerts WHERE user_id=? AND id=?", (query.from_user.id, alert_id))
            await db.commit()
            await query.message.edit_text("–ü—Ä–∞–≤–∏–ª–æ —É–¥–∞–ª–µ–Ω–æ")
    await query.answer()

# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ---
async def monitor_alerts():
    while True:
        async with aiosqlite.connect(DB_FILE) as db:
            cursor = await db.execute("SELECT * FROM alerts")
            all_alerts = await cursor.fetchall()
        for a in all_alerts:
            alert_id, user_id, link, shop, product, price, threshold = a
            new_product, new_price, _ = await parse_product(link)
            if new_price is not None and new_price <= threshold:
                try:
                    await bot.send_message(
                        user_id,
                        f"üî• –¶–µ–Ω–∞ —É–ø–∞–ª–∞ –¥–æ {new_price} ‚ÇΩ!\n"
                        f"üõçÔ∏è {product}\n"
                        f"üîó {link}"
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
        await asyncio.sleep(POLL_INTERVAL_SECONDS)

# --- Webhook –¥–ª—è Render ---
async def handle_webhook(request: web.Request):
    data = await request.json()
    from aiogram.types import Update
    update = Update(**data)
    await dp.process_update(update)
    return web.Response()

async def main():
    await init_db()
    asyncio.create_task(monitor_alerts())

    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle_webhook)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 10000)))
    await site.start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render!")
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())
